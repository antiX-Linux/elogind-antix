'\" t
.TH "SD_SEAT_GET_ACTIVE" "3" "" "elogind 234.4" "sd_seat_get_active"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_seat_get_active, sd_seat_get_sessions, sd_seat_can_multi_session, sd_seat_can_tty, sd_seat_can_graphical \- Determine state of a specific seat
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <elogind/sd\-login\&.h>
.fi
.ft
.HP \w'int\ sd_seat_get_active('u
.BI "int sd_seat_get_active(const\ char\ *" "seat" ", char\ **" "session" ", uid_t\ *" "uid" ");"
.HP \w'int\ sd_seat_get_sessions('u
.BI "int sd_seat_get_sessions(const\ char\ *" "seat" ", char\ ***" "sessions" ", uid_t\ **" "uid" ", unsigned\ int\ *" "n_uids" ");"
.HP \w'int\ sd_seat_can_multi_session('u
.BI "int sd_seat_can_multi_session(const\ char\ *" "seat" ");"
.HP \w'int\ sd_seat_can_tty('u
.BI "int sd_seat_can_tty(const\ char\ *" "seat" ");"
.HP \w'int\ sd_seat_can_graphical('u
.BI "int sd_seat_can_graphical(const\ char\ *" "seat" ");"
.SH "DESCRIPTION"
.PP
\fBsd_seat_get_active()\fR
may be used to determine which session is currently active on a seat, if there is any\&. Returns the session identifier and the user identifier of the Unix user the session is belonging to\&. Either the session or the user identifier parameter can be passed
\fBNULL\fR, in case only one of the parameters shall be queried\&. The returned string needs to be freed with the libc
\fBfree\fR(3)
call after use\&.
.PP
\fBsd_seat_get_sessions()\fR
may be used to determine all sessions on the specified seat\&. Returns two arrays, one (\fBNULL\fR
terminated) with the session identifiers of the sessions and one with the user identifiers of the Unix users the sessions belong to\&. An additional parameter may be used to return the number of entries in the latter array\&. This value is the same the return value, if the latter is nonnegative\&. The two arrays and the last parameter may be passed as
\fBNULL\fR
in case these values need not to be determined\&. The arrays and the strings referenced by them need to be freed with the libc
\fBfree\fR(3)
call after use\&. Note that instead of an empty array
\fBNULL\fR
may be returned and should be considered equivalent to an empty array\&.
.PP
\fBsd_seat_can_multi_session()\fR
may be used to determine whether a specific seat is capable of multi\-session, i\&.e\&. allows multiple login sessions in parallel (with only one being active at a time)\&.
.PP
\fBsd_seat_can_tty()\fR
may be used to determine whether a specific seat provides TTY functionality, i\&.e\&. is useful as a text console\&.
.PP
\fBsd_seat_can_graphical()\fR
may be used to determine whether a specific seat provides graphics functionality, i\&.e\&. is useful as a graphics display\&.
.PP
If the
\fIseat\fR
parameter of any of these functions is passed as
\fBNULL\fR, the operation is executed for the seat of the session of the calling process, if there is any\&.
.SH "RETURN VALUE"
.PP
On success,
\fBsd_seat_get_active()\fR
returns 0 or a positive integer\&. On success,
\fBsd_seat_get_sessions()\fR
returns the number of entries in the session identifier array\&. If the test succeeds,
\fBsd_seat_can_multi_session\fR,
\fBsd_seat_can_tty\fR
and
\fBsd_seat_can_graphical\fR
return a positive integer, if it fails 0\&. On failure, these calls return a negative errno\-style error code\&.
.SH "ERRORS"
.PP
Returned errors may indicate the following problems:
.PP
\fB\-ENODATA\fR
.RS 4
The given field is not specified for the described seat\&.
.RE
.PP
\fB\-ENXIO\fR
.RS 4
The specified seat is unknown\&.
.RE
.PP
\fB\-EINVAL\fR
.RS 4
An input parameter was invalid (out of range, or NULL, where that is not accepted)\&.
.RE
.PP
\fB\-ENOMEM\fR
.RS 4
Memory allocation failed\&.
.RE
.SH "NOTES"
.PP
The
\fBsd_seat_get_active()\fR,
\fBsd_seat_get_sessions()\fR,
\fBsd_seat_can_multi_session()\fR,
\fBsd_seat_can_tty()\fR
and
\fBsd_seat_can_graphical()\fR
interfaces are available as a shared library, which can be compiled and linked to with the
\fBlibelogind\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBelogind\fR(8),
\fBsd-login\fR(3),
\fBsd_session_get_seat\fR(3)
